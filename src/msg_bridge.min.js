//初始化MsgBridge构造器
//动态加载SharedWorker
function MsgBridge(url, clientId, pageId){
  this.url = url;
  this.clientId=clientId;
  this.pageId=pageId;
  this.msgCenter = {};
  this.cbMap = {};
  this.sharedWorker = null;
  this.init();
}
//创建worker,建立连接,建立消息监听
MsgBridge.prototype.init = function(){
  this.sharedWorker = new SharedWorker('msg_bridge_shared_worker.js?v=0.1.0'); //创建一个实例
  // 监听 SharedWorker 发送的消息
  this.sharedWorker.port.addEventListener("message", (event) => {
    console.log("Message from MsgBridge SharedWorker:", event.data);
    // if(regType.endsWith(':*')){
    //   return msg.type === regType.slice(0, -2);
    // }
    if(typeof event.data === 'string' && event.data.startsWith('sse:')){
      this.cbMap['sse:*'] && this.cbMap['sse:*'](JSON.parse(event.data.slice(4)));
      return;
    }
    this.cbMap['browser:*'] && this.cbMap['browser:*'](event.data.data);
  });
  this.sharedWorker.port.start();
  this.sharedWorker.port.postMessage({ type: "init", pageId: this.pageId, clientId:this.clientId });
  this.initClearFn();
};
MsgBridge.prototype.reg = function(msgTypes, cb){
  this.cbMap[msgTypes] = cb;
};

//默认的全局默认callback
MsgBridge.prototype.setDefaultCallBack = function(cb){
  this.defaultCallBack = cb|| window.msgBridgeDefaultCallBack || (()=>{});
};

//消息到达时的处理函数


//发送消息
MsgBridge.prototype.send = function(msg){
  this.sharedWorker.port.postMessage(Object.assign({pageId: this.pageId, clientId:this.clientId},msg));
};

//页面关闭时自动释放当前对SharedWorker的连接和绑定,避免内存泄漏
MsgBridge.prototype.initClearFn = function(){
  let port = this.sharedWorker.port;
  window.addEventListener('beforeunload', () => {
    port.postMessage({type: 'close',  pageId: this.pageId, clientId:this.clientId});
  });
};